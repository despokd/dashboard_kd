"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const utils = __importStar(require("./utils"));
/**
 * Query the server for possible routes from one stop to another.
 * @param originID the id of the origin stop
 * @param destinationID the id of the destination stop
 * @param time starting at what time
 * @param isArrivalTime is time the arrival time
 * @param timeout the timeout of the request
 * @returns Returns multiple possible trips, the bus-/tramlines to be taken,
 * the single stops, their arrival and departure times and their GPS coordinates.
 * The path property of a trip contains an array consisting of all the coordinates
 * describing the path of this node. This can be useful to draw the route on a map.
 */
function route(originID, destinationID, time = new Date(), isArrivalTime = true, timeout = 15000) {
    const options = {
        url: "https://webapi.vvo-online.de/tr/trips",
        params: {
            format: "json",
            origin: originID,
            destination: destinationID,
            isarrivaltime: isArrivalTime,
            shorttermchanges: true,
            time: time.toISOString(),
        },
        timeout,
    };
    return axios_1.default(options)
        .then((response) => {
        // check status of response
        utils.checkStatus(response.data);
        let origin;
        let destination;
        let trips = [];
        if (response.data.Routes) {
            trips = response.data.Routes.map(utils.extractTrip);
            if (trips && trips.length > 0) {
                const firstTrip = trips[0];
                if (firstTrip.departure) {
                    origin = {
                        id: firstTrip.departure.id,
                        name: firstTrip.departure.name,
                        city: firstTrip.departure.city,
                        coords: firstTrip.departure.coords,
                    };
                }
                if (firstTrip.arrival) {
                    destination = {
                        id: firstTrip.arrival.id,
                        name: firstTrip.arrival.name,
                        city: firstTrip.arrival.city,
                        coords: firstTrip.arrival.coords,
                    };
                }
            }
        }
        return {
            origin,
            destination,
            trips,
        };
    })
        .catch(utils.convertError);
}
exports.route = route;
