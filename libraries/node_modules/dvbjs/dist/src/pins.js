"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const interfaces_1 = require("./interfaces");
const utils = __importStar(require("./utils"));
/**
 * Search for different kinds of POIs inside a given bounding box.
 * @param swlng the longitude of the south west coordinate
 * @param swlat the latitude of the south west coordinate
 * @param nelng the longitude of the north east coordinate
 * @param nelat the latitude of the north east coordinate
 * @param pinTypes array of pin types
 * @param timeout the timeout of the request
 */
function pins(swlng, swlat, nelng, nelat, pinTypes = [interfaces_1.PIN_TYPE.stop], timeout = 5000) {
    const sw = utils.WGS84toWm(swlng, swlat);
    const ne = utils.WGS84toWm(nelng, nelat);
    let url = "https://www.dvb.de/apps/map/pins?showLines=true";
    pinTypes.forEach((type) => (url += `&pintypes=${type}`));
    const options = {
        url,
        params: {
            swlng: sw[0],
            swlat: sw[1],
            nelng: ne[0],
            nelat: ne[1],
        },
        responseType: "text",
        timeout,
    };
    return axios_1.default(options)
        .then((response) => {
        return response.data || [];
    })
        .then((elements) => elements.map((elem) => utils.parsePin(elem)));
}
exports.pins = pins;
