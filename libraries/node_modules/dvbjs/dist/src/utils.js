"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proj4_1 = __importDefault(require("proj4"));
const interfaces_1 = require("./interfaces");
// EPSG:31468
proj4_1.default.defs("GK4", "+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +datum=potsdam +units=m +no_defs");
// EPSG:3857
proj4_1.default.defs("WM", "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs");
function WGS84toGK4(lng, lat) {
    return proj4_1.default("WGS84", "GK4", [lng, lat]).map(Math.round);
}
exports.WGS84toGK4 = WGS84toGK4;
function WGS84toWm(lng, lat) {
    return proj4_1.default("WGS84", "WM", [lng, lat]).map(Math.round);
}
exports.WGS84toWm = WGS84toWm;
function WmOrGK4toWGS84(lng, lat) {
    const latInt = parseInt(lat, 10);
    const lngInt = parseInt(lng, 10);
    if (latInt === 0 && lngInt === 0) {
        return undefined;
    }
    if (isNaN(latInt) || isNaN(lngInt)) {
        return undefined;
    }
    if (lngInt < 2500000) {
        return proj4_1.default("WM", "WGS84", [lngInt, latInt]);
    }
    else {
        return proj4_1.default("GK4", "WGS84", [lngInt, latInt]);
    }
}
exports.WmOrGK4toWGS84 = WmOrGK4toWGS84;
function convertCoordinates(s) {
    const coords = [];
    if (s) {
        const gk4Chords = s.split("|");
        let i = 1;
        const len = gk4Chords.length - 1;
        while (i < len) {
            const coordinate = WmOrGK4toWGS84(gk4Chords[i + 1], gk4Chords[i]);
            if (coordinate) {
                coords.push(coordinate);
            }
            i += 2;
        }
    }
    return coords;
}
exports.convertCoordinates = convertCoordinates;
function checkStatus(data) {
    if (!data || !data.Status) {
        throw new Error("unexpected error");
    }
    if (data.Status.Code !== "Ok") {
        const error = new Error(data.Status.Message);
        error.name = data.Status.Code;
        throw error;
    }
}
exports.checkStatus = checkStatus;
function constructError(name, message = "") {
    const error = new Error(message);
    if (name) {
        error.name = name;
    }
    return error;
}
exports.constructError = constructError;
function convertError(err) {
    if (err.response && err.response.data && err.response.data.Status) {
        throw constructError(err.response.data.Status.Code, err.response.data.Status.Message);
    }
    throw err;
}
exports.convertError = convertError;
function parseDate(d) {
    const matches = d.match(/\d+/);
    if (matches) {
        return new Date(parseInt(matches[0], 10));
    }
    return new Date();
}
exports.parseDate = parseDate;
function parseDiva(d) {
    return d && d.Number
        ? { number: parseInt(d.Number, 10), network: d.Network }
        : undefined;
}
exports.parseDiva = parseDiva;
function parsePlatform(p) {
    return p ? { name: p.Name, type: p.Type } : undefined;
}
exports.parsePlatform = parsePlatform;
function pinType(str) {
    switch (str) {
        case "":
            return interfaces_1.PIN_TYPE.stop;
        case "p":
            return interfaces_1.PIN_TYPE.poi;
        case "pf":
            return interfaces_1.PIN_TYPE.platform;
        case "pr":
            return interfaces_1.PIN_TYPE.parkandride;
        case "r":
            return interfaces_1.PIN_TYPE.rentabike;
        case "c":
            return interfaces_1.PIN_TYPE.carsharing;
        case "t":
            return interfaces_1.PIN_TYPE.ticketmachine;
    }
    return interfaces_1.PIN_TYPE.unknown;
}
exports.MODES = {
    Tram: {
        title: "Straßenbahn",
        name: "Tram",
        iconUrl: "https://www.dvb.de/assets/img/trans-icon/transport-tram.svg",
    },
    CityBus: {
        title: "Bus",
        name: "CityBus",
        iconUrl: "https://www.dvb.de/assets/img/trans-icon/transport-bus.svg",
    },
    IntercityBus: {
        title: "Regio-Bus",
        name: "IntercityBus",
        iconUrl: "https://www.dvb.de/assets/img/trans-icon/transport-bus.svg",
    },
    SuburbanRailway: {
        title: "S-Bahn",
        name: "SuburbanRailway",
        iconUrl: "https://www.dvb.de/assets/img/trans-icon/transport-metropolitan.svg",
    },
    Train: {
        title: "Zug",
        name: "Train",
        iconUrl: "https://www.dvb.de/assets/img/trans-icon/transport-train.svg",
    },
    Cableway: {
        title: "Seil-/Schwebebahn",
        name: "Cableway",
        iconUrl: "https://www.dvb.de/assets/img/trans-icon/transport-lift.svg",
    },
    Ferry: {
        title: "Fähre",
        name: "Ferry",
        iconUrl: "https://www.dvb.de/assets/img/trans-icon/transport-ferry.svg",
    },
    HailedSharedTaxi: {
        title: "Anrufsammeltaxi (AST)/ Rufbus",
        name: "HailedSharedTaxi",
        iconUrl: "https://www.dvb.de/assets/img/trans-icon/transport-alita.svg",
    },
    Footpath: {
        title: "Fussweg",
        name: "Footpath",
        iconUrl: "https://m.dvb.de/img/walk.svg",
    },
    StairsUp: {
        title: "Treppe aufwärts",
        name: "StairsUp",
        iconUrl: "https://m.dvb.de/img/stairs-up.svg",
    },
    StairsDown: {
        title: "Treppe abwärts",
        name: "StairsDown",
        iconUrl: "https://m.dvb.de/img/stairs-down.svg",
    },
    EscalatorUp: {
        title: "Rolltreppe aufwärts",
        name: "EscalatorUp",
        iconUrl: "https://m.dvb.de/img/escalator-up.svg",
    },
    EscalatorDown: {
        title: "Rolltreppe abwärts",
        name: "EscalatorDown",
        iconUrl: "https://m.dvb.de/img/escalator-down.svg",
    },
    ElevatorUp: {
        title: "Fahrstuhl aufwärts",
        name: "ElevatorUp",
        iconUrl: "https://m.dvb.de/img/elevator-up.svg",
    },
    ElevatorDown: {
        title: "Fahrstuhl abwärts",
        name: "ElevatorDown",
        iconUrl: "https://m.dvb.de/img/elevator-down.svg",
    },
    StayForConnection: {
        title: "gesicherter Anschluss",
        name: "StayForConnection",
        iconUrl: "https://m.dvb.de/img/sit.svg",
    },
    PlusBus: {
        title: "PlusBus",
        name: "PlusBus",
        iconUrl: "https://m.dvb.de/img/mot_icons/plusBus.svg",
    },
};
function connectionType(str) {
    switch (str) {
        case "1":
            return exports.MODES.Tram;
        case "2":
            return exports.MODES.CityBus;
        case "3":
            return exports.MODES.IntercityBus;
        case "4":
            return exports.MODES.Train;
        case "5":
            return exports.MODES.SuburbanRailway;
        case "6":
            return exports.MODES.HailedSharedTaxi;
        case "7":
            return exports.MODES.Ferry;
        case "8":
            return exports.MODES.Cableway;
        case "10":
            return exports.MODES.PlusBus;
        default:
            return undefined;
    }
}
function parseConnections(data) {
    let connections = [];
    data.split("#").forEach((types) => {
        if (!types) {
            return [];
        }
        const typesArray = types.split(":");
        const mode = connectionType(typesArray[0]);
        connections = connections.concat(typesArray[1].split("~").map((line) => ({
            line,
            mode,
        })));
    });
    return connections;
}
exports.parseConnections = parseConnections;
function parsePin(dataAsString) {
    const data = dataAsString.split("|");
    const coords = WmOrGK4toWGS84(data[5], data[4]) || [];
    const type = pinType(data[1]);
    if (type === interfaces_1.PIN_TYPE.platform) {
        return {
            coords,
            id: data[0],
            name: data[3],
            platformNr: data[6],
            type,
        };
    }
    if (type === interfaces_1.PIN_TYPE.poi ||
        type === interfaces_1.PIN_TYPE.rentabike ||
        type === interfaces_1.PIN_TYPE.ticketmachine ||
        type === interfaces_1.PIN_TYPE.carsharing ||
        type === interfaces_1.PIN_TYPE.unknown) {
        return {
            coords,
            id: data[0],
            name: data[3],
            type,
        };
    }
    if (type === interfaces_1.PIN_TYPE.parkandride) {
        return {
            coords,
            id: data[0],
            name: data[3],
            info: data[6],
            type,
        };
    }
    // 'stop' id default
    return {
        coords,
        id: data[0],
        name: data[3],
        connections: parseConnections(data[7]),
        type,
    };
}
exports.parsePin = parsePin;
function parseMode(name) {
    if (!name) {
        return undefined;
    }
    switch (name.toLowerCase()) {
        case "tram":
            return exports.MODES.Tram;
        case "bus":
        case "citybus":
            return exports.MODES.CityBus;
        case "intercitybus":
            return exports.MODES.IntercityBus;
        case "suburbanrailway":
            return exports.MODES.SuburbanRailway;
        case "train":
        case "rapidtransit":
            return exports.MODES.Train;
        case "footpath":
            return exports.MODES.Footpath;
        case "cableway":
        case "overheadrailway":
            return exports.MODES.Cableway;
        case "ferry":
            return exports.MODES.Ferry;
        case "hailedsharedtaxi":
            return exports.MODES.HailedSharedTaxi;
        case "mobilitystairsup":
            return exports.MODES.StairsUp;
        case "mobilitystairsdown":
            return exports.MODES.StairsDown;
        case "mobilityescalatorup":
            return exports.MODES.EscalatorUp;
        case "mobilityescalatordown":
            return exports.MODES.EscalatorDown;
        case "mobilityelevatorup":
            return exports.MODES.ElevatorUp;
        case "mobilityelevatordown":
            return exports.MODES.ElevatorDown;
        case "stayforconnection":
            return exports.MODES.StayForConnection;
        case "plusbus":
            return exports.MODES.PlusBus;
        default:
            return {
                name,
                title: name.toLowerCase(),
            };
    }
}
exports.parseMode = parseMode;
function parsePoiID(id) {
    let poiId = id.split(":");
    if (poiId.length >= 4) {
        poiId = poiId.slice(0, 4);
        switch (poiId[0]) {
            case "streetID":
                return {
                    id: poiId.join(":"),
                    type: interfaces_1.POI_TYPE.Address,
                };
            case "coord":
                return {
                    id: poiId.join(":"),
                    type: interfaces_1.POI_TYPE.Coords,
                };
            case "poiID":
                return {
                    id: poiId.join(":"),
                    type: interfaces_1.POI_TYPE.POI,
                };
        }
    }
    return {
        id,
        type: interfaces_1.POI_TYPE.Stop,
    };
}
exports.parsePoiID = parsePoiID;
function extractStop(stop) {
    return {
        id: stop.DataId,
        name: stop.Name.trim(),
        city: stop.Place,
        type: stop.Type,
        platform: parsePlatform(stop.Platform),
        coords: WmOrGK4toWGS84(stop.Longitude, stop.Latitude) || [0, 0],
        arrival: parseDate(stop.ArrivalTime),
        departure: parseDate(stop.DepartureTime),
    };
}
function extractNode(node, mapData) {
    const stops = node.RegularStops
        ? node.RegularStops.map(extractStop)
        : [];
    let departure;
    let arrival;
    if (stops && stops.length > 1) {
        const firstStop = stops[0];
        const lastStop = stops[stops.length - 1];
        departure = {
            id: firstStop.id,
            name: firstStop.name,
            city: firstStop.city,
            platform: firstStop.platform,
            time: firstStop.departure,
            coords: firstStop.coords,
            type: firstStop.type,
        };
        arrival = {
            id: lastStop.id,
            name: lastStop.name,
            city: lastStop.city,
            platform: lastStop.platform,
            time: lastStop.arrival,
            coords: lastStop.coords,
            type: lastStop.type,
        };
    }
    return {
        stops,
        departure,
        arrival,
        mode: parseMode(node.Mot.Type),
        line: node.Mot.Name ? node.Mot.Name : "",
        direction: node.Mot.Direction ? node.Mot.Direction.trim() : "",
        diva: parseDiva(node.Mot.Diva),
        duration: node.Duration || 1,
        path: convertCoordinates(mapData[node.MapDataIndex]),
    };
}
function extractTrip(trip) {
    const nodes = trip.PartialRoutes.map((node) => extractNode(node, trip.MapData));
    return {
        nodes,
        departure: nodes[0].departure,
        arrival: nodes[nodes.length - 1].arrival,
        duration: trip.Duration || 1,
        interchanges: trip.Interchanges,
    };
}
exports.extractTrip = extractTrip;
function dateDifference(start, end) {
    return Math.round((end.getTime() - start.getTime()) / 1000 / 60);
}
exports.dateDifference = dateDifference;
