"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
/**
 * Monitor a single stop to see every bus or tram leaving this stop after the specified time offset.
 * @param stopID ID of the stop
 * @param offset how many minutes in the future, 0 for now
 * @param amount number of results
 * @param timeout the timeout of the request
 */
function monitor(stopID, offset = 0, amount = 0, timeout = 5000) {
    const now = new Date();
    const time = new Date(now.getTime() + offset * 60 * 1000);
    const options = {
        url: "https://webapi.vvo-online.de/dm",
        params: {
            format: "json",
            stopid: stopID,
            time: time.toISOString(),
            isarrival: false,
            limit: amount,
            shorttermchanges: true,
            mentzonly: false,
        },
        timeout,
    };
    return axios_1.default(options)
        .then((response) => {
        // check status of response
        utils_1.checkStatus(response.data);
        let result = [];
        if (response.data.Departures) {
            result = response.data.Departures.map((d) => {
                const arrivalTime = utils_1.parseDate(d.RealTime ? d.RealTime : d.ScheduledTime);
                const scheduledTime = utils_1.parseDate(d.ScheduledTime);
                return {
                    arrivalTime,
                    scheduledTime,
                    id: d.Id,
                    line: d.LineName,
                    direction: d.Direction,
                    platform: utils_1.parsePlatform(d.Platform),
                    arrivalTimeRelative: utils_1.dateDifference(now, arrivalTime),
                    scheduledTimeRelative: utils_1.dateDifference(now, scheduledTime),
                    delayTime: utils_1.dateDifference(scheduledTime, arrivalTime),
                    state: d.State ? d.State : "Unknown",
                    mode: utils_1.parseMode(d.Mot),
                    diva: utils_1.parseDiva(d.Diva),
                };
            });
        }
        return result;
    })
        .catch(utils_1.convertError);
}
exports.monitor = monitor;
